{
    "pipes": [],
    "interfaces": [],
    "injectables": [
        {
            "name": "TasksState",
            "id": "injectable-TasksState-aefd2c10f676d560f4f8b5921daf2896",
            "file": "src/app/state/task.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "archiveTask",
                    "args": [
                        {
                            "type": "StateContext<TaskStateModel>"
                        },
                        {
                            "type": "ArchiveTask"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "ArchiveTask"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "ArchiveTask",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllTasks",
                    "args": [
                        {
                            "name": "state",
                            "type": "TaskStateModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "Task[]",
                    "typeParameters": [],
                    "line": 56,
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "TaskStateModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getError",
                    "args": [
                        {
                            "name": "state",
                            "type": "TaskStateModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 63,
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "TaskStateModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pinTask",
                    "args": [
                        {
                            "type": "StateContext<TaskStateModel>"
                        },
                        {
                            "type": "PinTask"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "PinTask"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "PinTask",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAppError",
                    "args": [
                        {
                            "type": "StateContext<TaskStateModel>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "AppError"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Action, Selector, State, StateContext } from '@ngxs/store';\n\nimport { Injectable } from '@angular/core';\nimport { Task } from '../models/task.model';\n\n// defines the actions available to the app\nexport const actions = {\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n  // defines the new error field we need\n  ERROR: 'APP_ERROR',\n};\n\nexport class ArchiveTask {\n  static readonly type = actions.ARCHIVE_TASK;\n\n  constructor(public payload: string) {}\n}\n\nexport class PinTask {\n  static readonly type = actions.PIN_TASK;\n\n  constructor(public payload: string) {}\n}\n// the class definition for our error field\nexport class AppError {\n  static readonly type = actions.ERROR;\n  constructor(public payload: boolean) {}\n}\n\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = {\n  1: { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  2: { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  3: { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  4: { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n};\n\nexport class TaskStateModel {\n  entities: { [id: number]: Task };\n  error: boolean;\n}\n\n// sets the default state\n@State<TaskStateModel>({\n  name: 'tasks',\n  defaults: {\n    entities: defaultTasks,\n    error: false,\n  },\n})@Injectable()\n\nexport class TasksState {\n  @Selector()\n  static getAllTasks(state: TaskStateModel): Task[] {\n    const entities = state.entities;\n    return Object.keys(entities).map(id => entities[+id]);\n  }\n\n  // defines a new selector for the error field\n  @Selector()\n  static getError(state: TaskStateModel): boolean {\n    const { error } = state;\n    return error;\n  }\n\n  // triggers the PinTask action, similar to redux\n  @Action(PinTask)\n  pinTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: PinTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_PINNED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n  // triggers the PinTask action, similar to redux\n  @Action(ArchiveTask)\n  archiveTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: ArchiveTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_ARCHIVED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n\n  // function to handle how the state should be updated when the action is triggered\n  @Action(AppError)\n  setAppError({ patchState, getState }: StateContext<TaskStateModel>): void {\n    const state = getState();\n    patchState({\n      error: !state.error,\n    });\n  }\n}\n",
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppError",
            "id": "class-AppError-aefd2c10f676d560f4f8b5921daf2896",
            "file": "src/app/state/task.state.ts",
            "type": "class",
            "sourceCode": "import { Action, Selector, State, StateContext } from '@ngxs/store';\n\nimport { Injectable } from '@angular/core';\nimport { Task } from '../models/task.model';\n\n// defines the actions available to the app\nexport const actions = {\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n  // defines the new error field we need\n  ERROR: 'APP_ERROR',\n};\n\nexport class ArchiveTask {\n  static readonly type = actions.ARCHIVE_TASK;\n\n  constructor(public payload: string) {}\n}\n\nexport class PinTask {\n  static readonly type = actions.PIN_TASK;\n\n  constructor(public payload: string) {}\n}\n// the class definition for our error field\nexport class AppError {\n  static readonly type = actions.ERROR;\n  constructor(public payload: boolean) {}\n}\n\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = {\n  1: { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  2: { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  3: { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  4: { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n};\n\nexport class TaskStateModel {\n  entities: { [id: number]: Task };\n  error: boolean;\n}\n\n// sets the default state\n@State<TaskStateModel>({\n  name: 'tasks',\n  defaults: {\n    entities: defaultTasks,\n    error: false,\n  },\n})@Injectable()\n\nexport class TasksState {\n  @Selector()\n  static getAllTasks(state: TaskStateModel): Task[] {\n    const entities = state.entities;\n    return Object.keys(entities).map(id => entities[+id]);\n  }\n\n  // defines a new selector for the error field\n  @Selector()\n  static getError(state: TaskStateModel): boolean {\n    const { error } = state;\n    return error;\n  }\n\n  // triggers the PinTask action, similar to redux\n  @Action(PinTask)\n  pinTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: PinTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_PINNED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n  // triggers the PinTask action, similar to redux\n  @Action(ArchiveTask)\n  archiveTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: ArchiveTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_ARCHIVED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n\n  // function to handle how the state should be updated when the action is triggered\n  @Action(AppError)\n  setAppError({ patchState, getState }: StateContext<TaskStateModel>): void {\n    const state = getState();\n    patchState({\n      error: !state.error,\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "boolean"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "boolean",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "actions.ERROR",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        115,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ArchiveTask",
            "id": "class-ArchiveTask-aefd2c10f676d560f4f8b5921daf2896",
            "file": "src/app/state/task.state.ts",
            "type": "class",
            "sourceCode": "import { Action, Selector, State, StateContext } from '@ngxs/store';\n\nimport { Injectable } from '@angular/core';\nimport { Task } from '../models/task.model';\n\n// defines the actions available to the app\nexport const actions = {\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n  // defines the new error field we need\n  ERROR: 'APP_ERROR',\n};\n\nexport class ArchiveTask {\n  static readonly type = actions.ARCHIVE_TASK;\n\n  constructor(public payload: string) {}\n}\n\nexport class PinTask {\n  static readonly type = actions.PIN_TASK;\n\n  constructor(public payload: string) {}\n}\n// the class definition for our error field\nexport class AppError {\n  static readonly type = actions.ERROR;\n  constructor(public payload: boolean) {}\n}\n\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = {\n  1: { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  2: { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  3: { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  4: { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n};\n\nexport class TaskStateModel {\n  entities: { [id: number]: Task };\n  error: boolean;\n}\n\n// sets the default state\n@State<TaskStateModel>({\n  name: 'tasks',\n  defaults: {\n    entities: defaultTasks,\n    error: false,\n  },\n})@Injectable()\n\nexport class TasksState {\n  @Selector()\n  static getAllTasks(state: TaskStateModel): Task[] {\n    const entities = state.entities;\n    return Object.keys(entities).map(id => entities[+id]);\n  }\n\n  // defines a new selector for the error field\n  @Selector()\n  static getError(state: TaskStateModel): boolean {\n    const { error } = state;\n    return error;\n  }\n\n  // triggers the PinTask action, similar to redux\n  @Action(PinTask)\n  pinTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: PinTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_PINNED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n  // triggers the PinTask action, similar to redux\n  @Action(ArchiveTask)\n  archiveTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: ArchiveTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_ARCHIVED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n\n  // function to handle how the state should be updated when the action is triggered\n  @Action(AppError)\n  setAppError({ patchState, getState }: StateContext<TaskStateModel>): void {\n    const state = getState();\n    patchState({\n      error: !state.error,\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "actions.ARCHIVE_TASK",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        115,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PinTask",
            "id": "class-PinTask-aefd2c10f676d560f4f8b5921daf2896",
            "file": "src/app/state/task.state.ts",
            "type": "class",
            "sourceCode": "import { Action, Selector, State, StateContext } from '@ngxs/store';\n\nimport { Injectable } from '@angular/core';\nimport { Task } from '../models/task.model';\n\n// defines the actions available to the app\nexport const actions = {\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n  // defines the new error field we need\n  ERROR: 'APP_ERROR',\n};\n\nexport class ArchiveTask {\n  static readonly type = actions.ARCHIVE_TASK;\n\n  constructor(public payload: string) {}\n}\n\nexport class PinTask {\n  static readonly type = actions.PIN_TASK;\n\n  constructor(public payload: string) {}\n}\n// the class definition for our error field\nexport class AppError {\n  static readonly type = actions.ERROR;\n  constructor(public payload: boolean) {}\n}\n\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = {\n  1: { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  2: { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  3: { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  4: { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n};\n\nexport class TaskStateModel {\n  entities: { [id: number]: Task };\n  error: boolean;\n}\n\n// sets the default state\n@State<TaskStateModel>({\n  name: 'tasks',\n  defaults: {\n    entities: defaultTasks,\n    error: false,\n  },\n})@Injectable()\n\nexport class TasksState {\n  @Selector()\n  static getAllTasks(state: TaskStateModel): Task[] {\n    const entities = state.entities;\n    return Object.keys(entities).map(id => entities[+id]);\n  }\n\n  // defines a new selector for the error field\n  @Selector()\n  static getError(state: TaskStateModel): boolean {\n    const { error } = state;\n    return error;\n  }\n\n  // triggers the PinTask action, similar to redux\n  @Action(PinTask)\n  pinTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: PinTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_PINNED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n  // triggers the PinTask action, similar to redux\n  @Action(ArchiveTask)\n  archiveTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: ArchiveTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_ARCHIVED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n\n  // function to handle how the state should be updated when the action is triggered\n  @Action(AppError)\n  setAppError({ patchState, getState }: StateContext<TaskStateModel>): void {\n    const state = getState();\n    patchState({\n      error: !state.error,\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "actions.PIN_TASK",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        115,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Task",
            "id": "class-Task-9d8ccfa688ff4e32d7e2756b7b12df08",
            "file": "src/app/models/task.model.ts",
            "type": "class",
            "sourceCode": "export abstract class Task {\n  id: string;\n  title: string;\n  state: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "state",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TaskStateModel",
            "id": "class-TaskStateModel-aefd2c10f676d560f4f8b5921daf2896",
            "file": "src/app/state/task.state.ts",
            "type": "class",
            "sourceCode": "import { Action, Selector, State, StateContext } from '@ngxs/store';\n\nimport { Injectable } from '@angular/core';\nimport { Task } from '../models/task.model';\n\n// defines the actions available to the app\nexport const actions = {\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n  // defines the new error field we need\n  ERROR: 'APP_ERROR',\n};\n\nexport class ArchiveTask {\n  static readonly type = actions.ARCHIVE_TASK;\n\n  constructor(public payload: string) {}\n}\n\nexport class PinTask {\n  static readonly type = actions.PIN_TASK;\n\n  constructor(public payload: string) {}\n}\n// the class definition for our error field\nexport class AppError {\n  static readonly type = actions.ERROR;\n  constructor(public payload: boolean) {}\n}\n\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = {\n  1: { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  2: { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  3: { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  4: { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n};\n\nexport class TaskStateModel {\n  entities: { [id: number]: Task };\n  error: boolean;\n}\n\n// sets the default state\n@State<TaskStateModel>({\n  name: 'tasks',\n  defaults: {\n    entities: defaultTasks,\n    error: false,\n  },\n})@Injectable()\n\nexport class TasksState {\n  @Selector()\n  static getAllTasks(state: TaskStateModel): Task[] {\n    const entities = state.entities;\n    return Object.keys(entities).map(id => entities[+id]);\n  }\n\n  // defines a new selector for the error field\n  @Selector()\n  static getError(state: TaskStateModel): boolean {\n    const { error } = state;\n    return error;\n  }\n\n  // triggers the PinTask action, similar to redux\n  @Action(PinTask)\n  pinTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: PinTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_PINNED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n  // triggers the PinTask action, similar to redux\n  @Action(ArchiveTask)\n  archiveTask({ patchState, getState }: StateContext<TaskStateModel>, { payload }: ArchiveTask): void {\n    const state = getState().entities;\n\n    const entities = {\n      ...state,\n      [payload]: { ...state[payload], state: 'TASK_ARCHIVED' },\n    };\n\n    patchState({\n      entities,\n    });\n  }\n\n  // function to handle how the state should be updated when the action is triggered\n  @Action(AppError)\n  setAppError({ patchState, getState }: StateContext<TaskStateModel>): void {\n    const state = getState();\n    patchState({\n      error: !state.error,\n    });\n  }\n}\n",
            "properties": [
                {
                    "name": "entities",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "error",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-781ac694166a7da427305e6475c89f60",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "template": "<app-inbox-screen></app-inbox-screen>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'Taskbox'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: `<app-inbox-screen></app-inbox-screen>`\n})\nexport class AppComponent {\n  title = 'Taskbox';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-08cb7e33cd1cec344490a4d49cbe9a4a",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 45,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output() onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 47
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "InboxScreenComponent",
            "id": "component-InboxScreenComponent-848d1d97980039b8c2907e33b38db4b9",
            "file": "src/app/components/04-data/inbox-screen.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-inbox-screen",
            "styleUrls": [],
            "styles": [],
            "template": "<app-pure-inbox-screen [error]=\"error$ | async\"></app-pure-inbox-screen>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error$",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "TasksState.getError"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { Select } from '@ngxs/store';\nimport { TasksState } from '../../state/task.state';\n\n@Component({\n  selector: 'app-inbox-screen',\n  template: `<app-pure-inbox-screen [error]=\"error$ | async\"></app-pure-inbox-screen>`,\n})\nexport class InboxScreenComponent implements OnInit {\n  @Select(TasksState.getError) error$: Observable<any>;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PureInboxScreenComponent",
            "id": "component-PureInboxScreenComponent-d9aeb6685b0326b8ed9f2525d5f1af2c",
            "file": "src/app/components/04-data/pure-inbox-screen.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pure-inbox-screen",
            "styleUrls": [],
            "styles": [],
            "template": "<div *ngIf=\"error\" class=\"page lists-show\">              <div class=\"wrapper-message\">\n                <span class=\"icon-face-sad\"></span>\n                <div class=\"title-message\">Oh no!</div>\n                <div class=\"subtitle-message\">Something went wrong</div>\n              </div>\n            </div>\n\n            <div *ngIf=\"!error\" class=\"page lists-show\">\n              <nav>\n                <h1 class=\"title-page\">\n                  <span class=\"title-wrapper\">Taskbox</span>\n                </h1>\n              </nav>\n              <app-task-list></app-task-list>\n            </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "error",
                    "line": 25,
                    "type": "boolean"
                },
                {
                    "name": "tasks",
                    "line": 26,
                    "type": "Task[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\nimport { Task } from 'src/app/models/task.model';\n\n@Component({\n  selector: 'app-pure-inbox-screen',\n  template: `<div *ngIf=\"error\" class=\"page lists-show\">\n              <div class=\"wrapper-message\">\n                <span class=\"icon-face-sad\"></span>\n                <div class=\"title-message\">Oh no!</div>\n                <div class=\"subtitle-message\">Something went wrong</div>\n              </div>\n            </div>\n\n            <div *ngIf=\"!error\" class=\"page lists-show\">\n              <nav>\n                <h1 class=\"title-page\">\n                  <span class=\"title-wrapper\">Taskbox</span>\n                </h1>\n              </nav>\n              <app-task-list></app-task-list>\n            </div>`\n})\nexport class PureInboxScreenComponent implements OnInit {\n  @Input() error: boolean;\n  @Input () tasks: Task[];\n  constructor() {}\n\n  ngOnInit(): void { }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 26
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "PureTaskListComponent",
            "id": "component-PureTaskListComponent-6c982aa8fa661ddc076079446c2aac30",
            "file": "src/app/components/03-pure-task-list/pure-task-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pure-task-list",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"list-items\">              <app-task\n                *ngFor=\"let task of tasksInOrder\"\n                [task]=\"task\"\n                (onArchiveTask)=\"onArchiveTask.emit($event)\"\n                (onPinTask)=\"onPinTask.emit($event)\"\n              >\n              </app-task>\n\n              <div *ngIf=\"tasksInOrder.length === 0 && !loading\" class=\"wrapper-message\">\n                <span class=\"icon-check\"></span>\n                <div class=\"title-message\">You have no tasks</div>\n                <div class=\"subtitle-message\">Sit back and relax</div>\n              </div>\n\n              <div *ngIf=\"loading\">\n                <div *ngFor=\"let i of [1, 2, 3, 4, 5, 6]\" class=\"loading-item\">\n                  <span class=\"glow-checkbox\"></span>\n                  <span class=\"glow-text\"> <span>Loading</span> <span>cool</span> <span>state</span> </span>\n                </div>\n              </div>\n            </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "line": 36
                },
                {
                    "name": "tasks",
                    "line": 43,
                    "type": "[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "onArchiveTask",
                    "defaultValue": "new EventEmitter()",
                    "line": 40,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onPinTask",
                    "defaultValue": "new EventEmitter()",
                    "line": 38,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "tasksInOrder",
                    "defaultValue": "[]",
                    "type": "Task[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\nimport { Task } from 'src/app/models/task.model';\n\n@Component({\n  selector: 'app-pure-task-list',\n  template: `<div class=\"list-items\">\n              <app-task\n                *ngFor=\"let task of tasksInOrder\"\n                [task]=\"task\"\n                (onArchiveTask)=\"onArchiveTask.emit($event)\"\n                (onPinTask)=\"onPinTask.emit($event)\"\n              >\n              </app-task>\n\n              <div *ngIf=\"tasksInOrder.length === 0 && !loading\" class=\"wrapper-message\">\n                <span class=\"icon-check\"></span>\n                <div class=\"title-message\">You have no tasks</div>\n                <div class=\"subtitle-message\">Sit back and relax</div>\n              </div>\n\n              <div *ngIf=\"loading\">\n                <div *ngFor=\"let i of [1, 2, 3, 4, 5, 6]\" class=\"loading-item\">\n                  <span class=\"glow-checkbox\"></span>\n                  <span class=\"glow-text\"> <span>Loading</span> <span>cool</span> <span>state</span> </span>\n                </div>\n              </div>\n            </div>`\n})\nexport class PureTaskListComponent implements OnInit {\n\n  constructor() { }\n\n  tasksInOrder: Task[] = [];\n\n  @Input() loading = false;\n\n  @Output() onPinTask: EventEmitter<any> = new EventEmitter();\n\n  @Output() onArchiveTask: EventEmitter<any> = new EventEmitter();\n\n  @Input()\n  set tasks(arr: Task[]) {\n    this.tasksInOrder = [\n      ...arr.filter(t => t.state === 'TASK_PINNED'),\n      ...arr.filter(t => t.state !== 'TASK_PINNED'),\n    ];\n  }\n  ngOnInit(): void { }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 30
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "tasks": {
                    "name": "tasks",
                    "setSignature": {
                        "name": "tasks",
                        "type": "void",
                        "args": [
                            {
                                "name": "arr",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 43,
                        "jsdoctags": [
                            {
                                "name": "arr",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "TaskComponent",
            "id": "component-TaskComponent-c7c8e31084a6bd191a7b6b8d01b9ccd6",
            "file": "src/app/components/01-task/task.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"list-item {{ task?.state }}\">              <label class=\"checkbox\">\n                <input\n                  type=\"checkbox\"\n                  [defaultChecked]=\"task?.state === 'TASK_ARCHIVED'\"\n                  disabled=\"true\"\n                  name=\"checked\"\n                />\n                <span class=\"checkbox-custom\" (click)=\"onArchive(task.id)\"></span>\n              </label>\n              <div class=\"title\">\n                <input type=\"text\" [value]=\"task?.title\" readonly=\"true\" placeholder=\"Input title\" />\n              </div>\n              <div class=\"actions\">\n                <a *ngIf=\"task?.state !== 'TASK_ARCHIVED'\" (click)=\"onPin(task.id)\">\n                  <span class=\"icon-star\"></span>\n                </a>\n              </div>\n            </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "task",
                    "line": 30,
                    "type": "Task"
                }
            ],
            "outputsClass": [
                {
                    "name": "onArchiveTask",
                    "defaultValue": "new EventEmitter()",
                    "line": 34,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onPinTask",
                    "defaultValue": "new EventEmitter()",
                    "line": 32,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "onArchive",
                    "args": [
                        {
                            "name": "id",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPin",
                    "args": [
                        {
                            "name": "id",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\nimport { Task } from '../../models/task.model';\n\n@Component({\n  selector: 'app-task',\n  template: `<div class=\"list-item {{ task?.state }}\">\n              <label class=\"checkbox\">\n                <input\n                  type=\"checkbox\"\n                  [defaultChecked]=\"task?.state === 'TASK_ARCHIVED'\"\n                  disabled=\"true\"\n                  name=\"checked\"\n                />\n                <span class=\"checkbox-custom\" (click)=\"onArchive(task.id)\"></span>\n              </label>\n              <div class=\"title\">\n                <input type=\"text\" [value]=\"task?.title\" readonly=\"true\" placeholder=\"Input title\" />\n              </div>\n              <div class=\"actions\">\n                <a *ngIf=\"task?.state !== 'TASK_ARCHIVED'\" (click)=\"onPin(task.id)\">\n                  <span class=\"icon-star\"></span>\n                </a>\n              </div>\n            </div>`\n            })\n\nexport class TaskComponent implements OnInit {\n  title: string;\n  @Input() task: Task;\n\n  @Output() onPinTask: EventEmitter<any> = new EventEmitter();\n\n  @Output() onArchiveTask: EventEmitter<any> = new EventEmitter();\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  onPin(id: any): void {\n    this.onPinTask.emit(id);\n  }\n  onArchive(id: any): void {\n    this.onArchiveTask.emit(id);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 34
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "TaskComponent",
            "id": "component-TaskComponent-6b8f064bd7304bccc5a0eeab6c83d231-1",
            "file": "src/app/components/05-addons/task.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"list-item {{ task?.state }}\">                <label class=\"checkbox\">\n                  <input type=\"checkbox\" [defaultChecked]=\"task?.state === 'TASK_ARCHIVED'\" disabled=\"true\" name=\"checked\" />\n                  <span class=\"checkbox-custom\" (click)=\"onArchive(task.id)\"></span>\n                </label>\n                <div class=\"title\">\n                  <!-- This is the input for our task title. In practice we would probably update the styles for this element\n              but for this tutorial, let's fix the problem with an inline style:\n              -->\n                  <input type=\"text\" [(value)]=\"task.title\" class=\"list-item {{ task?.state }}\"\n                  placeholder=\"Change value in Controls tab\"\n                  readonly='true'\n                  [ngStyle]=\"{textOverflow:'ellipsis'}\"/>\n                </div>\n              <div class=\"actions\">\n                <a *ngIf=\"task?.state !== 'TASK_ARCHIVED'\" (click)=\"onPin(task.id)\">\n                  <span class=\"icon-star\"></span>\n                </a>\n              </div>\n            </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "task",
                    "defaultValue": "{\n    id: '1',\n    title: 'Test Input',\n    state: 'Task_INBOX'\n  }",
                    "line": 31,
                    "type": "Task"
                }
            ],
            "outputsClass": [
                {
                    "name": "onArchiveTask",
                    "defaultValue": "new EventEmitter()",
                    "line": 39,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onPinTask",
                    "defaultValue": "new EventEmitter()",
                    "line": 37,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "onArchive",
                    "args": [
                        {
                            "name": "id",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPin",
                    "args": [
                        {
                            "name": "id",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\nimport { Task } from '../../models/task.model';\n\n@Component({\n  selector: 'app-task',\n  template: `<div class=\"list-item {{ task?.state }}\">\n                <label class=\"checkbox\">\n                  <input type=\"checkbox\" [defaultChecked]=\"task?.state === 'TASK_ARCHIVED'\" disabled=\"true\" name=\"checked\" />\n                  <span class=\"checkbox-custom\" (click)=\"onArchive(task.id)\"></span>\n                </label>\n                <div class=\"title\">\n                  <!-- This is the input for our task title. In practice we would probably update the styles for this element\n              but for this tutorial, let's fix the problem with an inline style:\n              -->\n                  <input type=\"text\" [(value)]=\"task.title\" class=\"list-item {{ task?.state }}\"\n                  placeholder=\"Change value in Controls tab\"\n                  readonly='true'\n                  [ngStyle]=\"{textOverflow:'ellipsis'}\"/>\n                </div>\n              <div class=\"actions\">\n                <a *ngIf=\"task?.state !== 'TASK_ARCHIVED'\" (click)=\"onPin(task.id)\">\n                  <span class=\"icon-star\"></span>\n                </a>\n              </div>\n            </div>`,\n})\n\nexport class TaskComponent implements OnInit {\n\n  @Input() public task: Task = {\n    id: '1',\n    title: 'Test Input',\n    state: 'Task_INBOX'\n  };\n\n  @Output() onPinTask: EventEmitter<any> = new EventEmitter();\n\n  @Output() onArchiveTask: EventEmitter<any> = new EventEmitter();\n\n  constructor() { }\n\n  ngOnInit(): void { }\n\n  onPin(id: any): void {\n    this.onPinTask.emit(id);\n  }\n  onArchive(id: any): void {\n    this.onArchiveTask.emit(id);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 39
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "TaskComponent-1"
        },
        {
            "name": "TaskListComponent",
            "id": "component-TaskListComponent-e8dbe21648ff1afb91d740a5847c0003",
            "file": "src/app/components/02-task-list/task-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-list",
            "styleUrls": [],
            "styles": [],
            "template": "<app-pure-task-list              [tasks]=\"tasks$ | async\"\n              (onArchiveTask)=\"archiveTask($event)\"\n              (onPinTask)=\"pinTask($event)\"\n              ></app-pure-task-list>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tasks$",
                    "type": "Observable<Task[]>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "TasksState.getAllTasks"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "archiveTask",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "pinTask",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ArchiveTask, PinTask, TasksState } from '../../state/task.state';\nimport { Component, OnInit } from '@angular/core';\nimport { Select, Store } from '@ngxs/store';\n\nimport { Observable } from 'rxjs';\nimport { Task } from '../../models/task.model';\n\n@Component({\n  selector: 'app-task-list',\n  template: `<app-pure-task-list\n              [tasks]=\"tasks$ | async\"\n              (onArchiveTask)=\"archiveTask($event)\"\n              (onPinTask)=\"pinTask($event)\"\n              ></app-pure-task-list>`\n})\nexport class TaskListComponent implements OnInit {\n  @Select(TasksState.getAllTasks) tasks$: Observable<Task[]>;\n\n  constructor(private store: Store) {}\n\n  ngOnInit(): void {}\n\n  archiveTask(id: string): void {\n    this.store.dispatch(new ArchiveTask(id));\n  }\n\n  pinTask(id: string): void {\n    this.store.dispatch(new PinTask(id));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "InboxScreenComponent"
                        },
                        {
                            "name": "PureInboxScreenComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TaskModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TaskModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PureTaskListComponent"
                        },
                        {
                            "name": "TaskComponent"
                        },
                        {
                            "name": "TaskListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TaskComponent"
                        },
                        {
                            "name": "TaskListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "actions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/task.state.ts",
                "type": "object",
                "defaultValue": "{\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n  // defines the new error field we need\n  ERROR: 'APP_ERROR',\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/01-task/task.stories.ts",
                "type": "object",
                "defaultValue": "{\n  onPinTask: action('onPinTask'),\n  onArchiveTask: action('onArchiveTask'),\n}"
            },
            {
                "name": "Archived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/01-task/task.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: TaskComponent,\n  props: {\n    task: {\n      ...taskData,\n      state: 'TASK_ARCHIVED',\n    },\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/02-task-list/task-list.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: PureTaskListComponent,\n  template: `\n  <div style=\"padding: 3rem\">\n    <app-pure-task-list [tasks]=\"tasks\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-pure-task-list>\n  </div>\n`,\n  props: {\n    tasks: defaultTasksData,\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/01-task/task.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: TaskComponent,\n  props: {\n    task: taskData,\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/04-data/pure-inbox-screen.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/03-pure-task-list/pure-task-list.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: PureTaskListComponent,\n  template: `\n  <div style=\"padding: 3rem\">\n    <app-pure-task-list [tasks]=\"tasks\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-pure-task-list>\n  </div>\n`,\n  props: {\n    tasks: defaultTasksData,\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
            },
            {
                "name": "Defaults",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/05-addons/task.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "defaultTasks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/task.state.ts",
                "type": "object",
                "defaultValue": "{\n  1: { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  2: { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  3: { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  4: { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n}"
            },
            {
                "name": "defaultTasksData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/02-task-list/task-list.stories.ts",
                "type": "[]",
                "defaultValue": "[\n  { ...taskData, id: '1', title: 'Task 1' },\n  { ...taskData, id: '2', title: 'Task 2' },\n  { ...taskData, id: '3', title: 'Task 3' },\n  { ...taskData, id: '4', title: 'Task 4' },\n  { ...taskData, id: '5', title: 'Task 5' },\n  { ...taskData, id: '6', title: 'Task 6' },\n]"
            },
            {
                "name": "defaultTasksData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/03-pure-task-list/pure-task-list.stories.ts",
                "type": "[]",
                "defaultValue": "[\n  { ...taskData, id: '1', title: 'Task 1' },\n  { ...taskData, id: '2', title: 'Task 2' },\n  { ...taskData, id: '3', title: 'Task 3' },\n  { ...taskData, id: '4', title: 'Task 4' },\n  { ...taskData, id: '5', title: 'Task 5' },\n  { ...taskData, id: '6', title: 'Task 6' },\n]"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/02-task-list/task-list.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  template: `\n        <div style=\"padding: 3rem\">\n          <app-pure-task-list [tasks]=\"[]\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-pure-task-list>\n        </div>\n      `,\n})"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/03-pure-task-list/pure-task-list.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  template: `\n        <div style=\"padding: 3rem\">\n          <app-pure-task-list [tasks]=\"[]\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-pure-task-list>\n        </div>\n      `,\n})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/04-data/pure-inbox-screen.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/02-task-list/task-list.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  template: `\n        <div style=\"padding: 3rem\">\n          <app-pure-task-list [tasks]=\"[]\" loading=\"true\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-pure-task-list>\n        </div>\n      `,\n})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/03-pure-task-list/pure-task-list.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  template: `\n        <div style=\"padding: 3rem\">\n          <app-pure-task-list [tasks]=\"[]\" loading=\"true\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-pure-task-list>\n        </div>\n      `,\n})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "longTitle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/05-addons/task.stories.ts",
                "type": "",
                "defaultValue": "`This task's name is absurdly large. In fact, I think if I keep going I might end up with content overflow. What will happen? The star that represents a pinned task could have text overlapping. The text could cut-off abruptly when it reaches the star. I hope not!`"
            },
            {
                "name": "LongTitle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/05-addons/task.stories.ts",
                "type": "",
                "defaultValue": "(args: TaskComponent) => ({\n  component: TaskComponent,\n  props: {\n    ...args,\n    task: {\n      title: text('title', longTitle),\n    },\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
            },
            {
                "name": "mock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/jest-config/globalMocks.ts",
                "type": "",
                "defaultValue": "() => {\n  let storage = {};\n  return {\n    getItem: key => (key in storage ? storage[key] : null),\n    setItem: (key, value) => (storage[key] = value || ''),\n    removeItem: key => delete storage[key],\n    clear: () => (storage = {}),\n  };\n}"
            },
            {
                "name": "Pinned",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/01-task/task.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: TaskComponent,\n  props: {\n    task: {\n      ...taskData,\n      state: 'TASK_PINNED',\n    },\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "taskData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/01-task/task.stories.ts",
                "type": "object",
                "defaultValue": "{\n  id: '1',\n  title: 'Test Task',\n  state: 'Task_INBOX',\n  updated_at: new Date(2019, 0, 1, 9, 0),\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/04-data/pure-inbox-screen.stories.ts",
                "type": "Story<PureInboxScreenComponent>",
                "defaultValue": "(args: PureInboxScreenComponent) => ({\n  component: PureInboxScreenComponent,\n  props: {\n    error: boolean('error', args.error)\n  }\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/05-addons/task.stories.ts",
                "type": "Story<TaskComponent>",
                "defaultValue": "(args: TaskComponent) => ({\n  component: TaskComponent,\n  props: {\n    ...args,\n    task: {\n      id: text('id', String(...taskData.id)),\n      title: text('title', String(...taskData.title)),\n      state: text('state', String(...taskData.state))\n    }\n  }\n})"
            },
            {
                "name": "WithPinnedTasks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/02-task-list/task-list.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: PureTaskListComponent,\n  template: `\n    <div style=\"padding: 3rem\">\n      <app-pure-task-list [tasks]=\"tasks\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-pure-task-list>\n    </div>\n  `,\n  props: {\n    tasks: withPinnedTasksData,\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
            },
            {
                "name": "WithPinnedTasks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/03-pure-task-list/pure-task-list.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: PureTaskListComponent,\n  template: `\n    <div style=\"padding: 3rem\">\n      <app-pure-task-list [tasks]=\"tasks\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-pure-task-list>\n    </div>\n  `,\n  props: {\n    tasks: withPinnedTasksData,\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
            },
            {
                "name": "withPinnedTasksData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/02-task-list/task-list.stories.ts",
                "type": "[]",
                "defaultValue": "[\n  ...defaultTasksData.slice(0, 5),\n  { id: '6', title: 'Task 6 (pinned)', state: 'TASK_PINNED' },\n]"
            },
            {
                "name": "withPinnedTasksData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/03-pure-task-list/pure-task-list.stories.ts",
                "type": "[]",
                "defaultValue": "[\n  ...defaultTasksData.slice(0, 5),\n  { id: '6', title: 'Task 6 (pinned)', state: 'TASK_PINNED' },\n]"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/state/task.state.ts": [
                {
                    "name": "actions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/task.state.ts",
                    "type": "object",
                    "defaultValue": "{\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n  // defines the new error field we need\n  ERROR: 'APP_ERROR',\n}"
                },
                {
                    "name": "defaultTasks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/task.state.ts",
                    "type": "object",
                    "defaultValue": "{\n  1: { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  2: { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  3: { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  4: { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n}"
                }
            ],
            "src/app/components/01-task/task.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/01-task/task.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  onPinTask: action('onPinTask'),\n  onArchiveTask: action('onArchiveTask'),\n}"
                },
                {
                    "name": "Archived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/01-task/task.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: TaskComponent,\n  props: {\n    task: {\n      ...taskData,\n      state: 'TASK_ARCHIVED',\n    },\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/01-task/task.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: TaskComponent,\n  props: {\n    task: taskData,\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
                },
                {
                    "name": "Pinned",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/01-task/task.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: TaskComponent,\n  props: {\n    task: {\n      ...taskData,\n      state: 'TASK_PINNED',\n    },\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
                },
                {
                    "name": "taskData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/01-task/task.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  id: '1',\n  title: 'Test Task',\n  state: 'Task_INBOX',\n  updated_at: new Date(2019, 0, 1, 9, 0),\n}"
                }
            ],
            "src/app/components/02-task-list/task-list.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/02-task-list/task-list.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: PureTaskListComponent,\n  template: `\n  <div style=\"padding: 3rem\">\n    <app-pure-task-list [tasks]=\"tasks\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-pure-task-list>\n  </div>\n`,\n  props: {\n    tasks: defaultTasksData,\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
                },
                {
                    "name": "defaultTasksData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/02-task-list/task-list.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\n  { ...taskData, id: '1', title: 'Task 1' },\n  { ...taskData, id: '2', title: 'Task 2' },\n  { ...taskData, id: '3', title: 'Task 3' },\n  { ...taskData, id: '4', title: 'Task 4' },\n  { ...taskData, id: '5', title: 'Task 5' },\n  { ...taskData, id: '6', title: 'Task 6' },\n]"
                },
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/02-task-list/task-list.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  template: `\n        <div style=\"padding: 3rem\">\n          <app-pure-task-list [tasks]=\"[]\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-pure-task-list>\n        </div>\n      `,\n})"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/02-task-list/task-list.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  template: `\n        <div style=\"padding: 3rem\">\n          <app-pure-task-list [tasks]=\"[]\" loading=\"true\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-pure-task-list>\n        </div>\n      `,\n})"
                },
                {
                    "name": "WithPinnedTasks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/02-task-list/task-list.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: PureTaskListComponent,\n  template: `\n    <div style=\"padding: 3rem\">\n      <app-pure-task-list [tasks]=\"tasks\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-pure-task-list>\n    </div>\n  `,\n  props: {\n    tasks: withPinnedTasksData,\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
                },
                {
                    "name": "withPinnedTasksData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/02-task-list/task-list.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\n  ...defaultTasksData.slice(0, 5),\n  { id: '6', title: 'Task 6 (pinned)', state: 'TASK_PINNED' },\n]"
                }
            ],
            "src/app/components/04-data/pure-inbox-screen.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/04-data/pure-inbox-screen.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/04-data/pure-inbox-screen.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/04-data/pure-inbox-screen.stories.ts",
                    "type": "Story<PureInboxScreenComponent>",
                    "defaultValue": "(args: PureInboxScreenComponent) => ({\n  component: PureInboxScreenComponent,\n  props: {\n    error: boolean('error', args.error)\n  }\n})"
                }
            ],
            "src/app/components/03-pure-task-list/pure-task-list.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/03-pure-task-list/pure-task-list.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: PureTaskListComponent,\n  template: `\n  <div style=\"padding: 3rem\">\n    <app-pure-task-list [tasks]=\"tasks\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-pure-task-list>\n  </div>\n`,\n  props: {\n    tasks: defaultTasksData,\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
                },
                {
                    "name": "defaultTasksData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/03-pure-task-list/pure-task-list.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\n  { ...taskData, id: '1', title: 'Task 1' },\n  { ...taskData, id: '2', title: 'Task 2' },\n  { ...taskData, id: '3', title: 'Task 3' },\n  { ...taskData, id: '4', title: 'Task 4' },\n  { ...taskData, id: '5', title: 'Task 5' },\n  { ...taskData, id: '6', title: 'Task 6' },\n]"
                },
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/03-pure-task-list/pure-task-list.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  template: `\n        <div style=\"padding: 3rem\">\n          <app-pure-task-list [tasks]=\"[]\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-pure-task-list>\n        </div>\n      `,\n})"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/03-pure-task-list/pure-task-list.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  template: `\n        <div style=\"padding: 3rem\">\n          <app-pure-task-list [tasks]=\"[]\" loading=\"true\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-pure-task-list>\n        </div>\n      `,\n})"
                },
                {
                    "name": "WithPinnedTasks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/03-pure-task-list/pure-task-list.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: PureTaskListComponent,\n  template: `\n    <div style=\"padding: 3rem\">\n      <app-pure-task-list [tasks]=\"tasks\" (onPinTask)=\"onPinTask($event)\" (onArchiveTask)=\"onArchiveTask($event)\"></app-pure-task-list>\n    </div>\n  `,\n  props: {\n    tasks: withPinnedTasksData,\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
                },
                {
                    "name": "withPinnedTasksData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/03-pure-task-list/pure-task-list.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\n  ...defaultTasksData.slice(0, 5),\n  { id: '6', title: 'Task 6 (pinned)', state: 'TASK_PINNED' },\n]"
                }
            ],
            "src/app/components/05-addons/task.stories.ts": [
                {
                    "name": "Defaults",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/05-addons/task.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "longTitle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/05-addons/task.stories.ts",
                    "type": "",
                    "defaultValue": "`This task's name is absurdly large. In fact, I think if I keep going I might end up with content overflow. What will happen? The star that represents a pinned task could have text overlapping. The text could cut-off abruptly when it reaches the star. I hope not!`"
                },
                {
                    "name": "LongTitle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/05-addons/task.stories.ts",
                    "type": "",
                    "defaultValue": "(args: TaskComponent) => ({\n  component: TaskComponent,\n  props: {\n    ...args,\n    task: {\n      title: text('title', longTitle),\n    },\n    onPinTask: actionsData.onPinTask,\n    onArchiveTask: actionsData.onArchiveTask,\n  },\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/05-addons/task.stories.ts",
                    "type": "Story<TaskComponent>",
                    "defaultValue": "(args: TaskComponent) => ({\n  component: TaskComponent,\n  props: {\n    ...args,\n    task: {\n      id: text('id', String(...taskData.id)),\n      title: text('title', String(...taskData.title)),\n      state: text('state', String(...taskData.state))\n    }\n  }\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ],
            "src/jest-config/globalMocks.ts": [
                {
                    "name": "mock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/jest-config/globalMocks.ts",
                    "type": "",
                    "defaultValue": "() => {\n  let storage = {};\n  return {\n    getItem: key => (key in storage ? storage[key] : null),\n    setItem: (key, value) => (storage[key] = value || ''),\n    removeItem: key => delete storage[key],\n    clear: () => (storage = {}),\n  };\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/01-task/task.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/01-task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/01-task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Archived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/01-task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/01-task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Pinned",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/01-task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "taskData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/02-task-list/task-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/02-task-list/task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/02-task-list/task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultTasksData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/02-task-list/task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/02-task-list/task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/02-task-list/task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithPinnedTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/02-task-list/task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "withPinnedTasksData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/03-pure-task-list/pure-task-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PureTaskListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/03-pure-task-list/pure-task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/03-pure-task-list/pure-task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultTasksData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/03-pure-task-list/pure-task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/03-pure-task-list/pure-task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/03-pure-task-list/pure-task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithPinnedTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/03-pure-task-list/pure-task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "withPinnedTasksData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/04-data/inbox-screen.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InboxScreenComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/04-data/pure-inbox-screen.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PureInboxScreenComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/04-data/pure-inbox-screen.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/04-data/pure-inbox-screen.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/04-data/pure-inbox-screen.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/05-addons/task.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/05-addons/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Defaults",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/05-addons/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "longTitle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/05-addons/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LongTitle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/05-addons/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/task.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Task",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppError",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ArchiveTask",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PinTask",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TaskStateModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TasksState",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/jest-config/globalMocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}